/******************************************************
 * Behavior implementation file template.             *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/

#include "msp430_isa.H"
#include "msp430_isa_init.cpp"
#include "msp430_bhv_macros.H"
#include "msp430_pipe_IF.H"
#include "msp430_pipe_ID.H"
#include "msp430_pipe_EX.H"


//! 'using namespace' statement to allow access to all msp430-specific datatypes
using namespace msp430_parms;

//! Behavior executed before simulation begins.
void ac_behavior(begin)
{
 return;
}

//! Behavior executed after simulation ends.
void ac_behavior(end)
{
 return;
}

//! Generic instruction behavior method.
void ac_behavior(instruction)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}
//! Instruction format behavior methods.

void ac_behavior(Double_48)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(Double_32)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(Double)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(Single_32)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(Single)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(Jump)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_48idm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_48imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_32idst)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_32isrc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_32iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_32irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(mov_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(add_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(addc_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(and_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bic_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bis_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(bit_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(cmp_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(dadd_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sub_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(subc_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(xor_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_32sm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_32am)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_32imm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_32im)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rrc_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(rra_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(swpb_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(sxt_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(push_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_16rm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_16irm)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(call_16iaim)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(reti)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jne)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jeq)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jnc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jc)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jn)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jge)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jl)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}

void ac_behavior(jmp)
{
 switch (stage)
 {
  case id_pipe_IF:
   break;
  case id_pipe_ID:
   break;
  case id_pipe_EX:
   break;
  default:
 }
 return;
}
