/******************************************************
 * Interrupt Handlers implementation file.            *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br      		      *
 ******************************************************/

/**
 * @file   msp430_intr_handlers.cpp
 *
 * @author Dominic Zijlstra <dominiczijlstra@gmail.com> 
 * @date   Mon Jun 1 13:29:20 2015
 *
 * @brief  This file implements interrupt handling
 * 
 */

#include "ac_intr_handler.H"
#include "msp430_intr_handlers.H"

#include "msp430_ih_bhv_macros.H"

//!'using namespace' statement to allow access to all msp430-specific datatypes
using namespace msp430_parms;

sc_event interruptevent; //define interruptevent

// Interrupt handler behavior for interrupt port inta.
void ac_behavior(inta, value) {

	//cout << "INT: "<< (sc_core::sc_get_current_process_b()->get_parent()->name()) <<" - INTERRUPT ----- value = "<< value << " PC=" << RB.read(PC) << endl;
	
  	RB.write(SP, (RB.read(SP)-2)); // Increment Stack
  	DM.write(RB.read(SP), RB.read(PC));// Save current PC on top of stack

	RB.write(SP, (RB.read(SP)-2)); // Increment Stack
	DM.write(RB.read(SP), RB.read(SR));// Save current SR on top of stack

	RB.write(SR,0); //clear SR

	RB.write(PC,DM.read(value)); //load interrupt vector into PC
	ac_pc = DM.read(value);
	//cout << "INT: "<< (sc_core::sc_get_current_process_b()->get_parent()->name()) <<" - INTERRUPT ----- value = "<< value << " PC=" << RB.read(PC) << endl;
	interruptevent.notify(); //notify interrupt event to wake up isa
}

// Interrupt handler behavior for interrupt port intb.
void ac_behavior(intb, value) { 
	//cout << "INT: "<< (sc_core::sc_get_current_process_b()->get_parent()->name()) <<" - INTERRUPT ----- value = "<< value << " PC=" << RB.read(PC) << endl;
	
  	RB.write(SP, (RB.read(SP)-2)); // Increment Stack
  	DM.write(RB.read(SP), RB.read(PC));// Save current PC on top of stack

	RB.write(SP, (RB.read(SP)-2)); // Increment Stack
	DM.write(RB.read(SP), RB.read(SR));// Save current SR on top of stack

	RB.write(SR,0); //clear SR

	RB.write(PC,DM.read(value)); //load interrupt vector into PC
	ac_pc = DM.read(value);

	interruptevent.notify(); //notify interrupt event to wake up isa
}

