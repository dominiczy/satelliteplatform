/******************************************************
 * Processor Module Implementation File.              *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#include  "msp430.H"
#include  "msp430_isa.cpp"

#include  "msp430_syscall.H"

void msp430::behavior() {

  unsigned ins_id;
  cache_item_t* ins_cache;
  if (has_delayed_load) {
    APP_MEM->load(delayed_load_program);
    ac_pc = ac_start_addr;
    has_delayed_load = false;
  }

  for (;;) {

  bhv_pc = ac_pc;
  if( bhv_pc >= dec_cache_size){
    cerr << "ArchC: Address out of bounds (pc=0x" << hex << bhv_pc << ")." << endl;
    stop();
    return;
  }
  else {
    if( start_up ){
      decode_pc = ac_pc;
      ISA.syscall.set_prog_args(argc, argv);
      start_up=0;
      init_dec_cache();
    }
    else{ 
      decode_pc = bhv_pc;
    }
 
    //!Handling System calls.
    switch( decode_pc ){

#define AC_SYSC(NAME,LOCATION) \
    case LOCATION: \
        ISA.syscall.NAME(); \
      break;  \


#include <ac_syscall.def>

#undef AC_SYSC

    default:

      ins_cache = (DEC_CACHE+decode_pc);
      if ( !ins_cache->valid ){
        quant = 0;
        ins_cache->instr_p = new ac_instr<msp430_parms::AC_DEC_FIELD_NUMBER>((ISA.decoder)->Decode(reinterpret_cast<unsigned char*>(buffer), quant));
        ins_cache->valid = 1;
      }
      instr_vec = ins_cache->instr_p;
      ins_id = instr_vec->get(IDENT);

      if( ins_id == 0 ) {
        cerr << "ArchC Error: Unidentified instruction. " << endl;
        cerr << "PC = " << hex << decode_pc << dec << endl;
        stop();
        return;
      }

      if (gdbstub && gdbstub->stop(decode_pc)) gdbstub->process_bp();

      ac_pc = decode_pc;

      ISA.cur_instr_id = ins_id;
      if (!ac_annul_sig) ISA._behavior_instruction();
      switch (ins_id) {
      case 1: // Instruction mov_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 2: // Instruction mov_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 3: // Instruction add_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 4: // Instruction add_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 5: // Instruction addc_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 6: // Instruction addc_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 7: // Instruction and_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 8: // Instruction and_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 9: // Instruction bic_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 10: // Instruction bic_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 11: // Instruction bis_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 12: // Instruction bis_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 13: // Instruction bit_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 14: // Instruction bit_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 15: // Instruction cmp_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 16: // Instruction cmp_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 17: // Instruction dadd_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 18: // Instruction dadd_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 19: // Instruction sub_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 20: // Instruction sub_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 21: // Instruction subc_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 22: // Instruction subc_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 23: // Instruction xor_48idm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_48idm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 24: // Instruction xor_48imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_48(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_48imm(instr_vec->get(1), instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 25: // Instruction mov_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 26: // Instruction mov_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 27: // Instruction mov_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 28: // Instruction mov_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 29: // Instruction mov_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 30: // Instruction add_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 31: // Instruction add_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 32: // Instruction add_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 33: // Instruction add_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 34: // Instruction add_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 35: // Instruction addc_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 36: // Instruction addc_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 37: // Instruction addc_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 38: // Instruction addc_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 39: // Instruction addc_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 40: // Instruction and_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 41: // Instruction and_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 42: // Instruction and_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 43: // Instruction and_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 44: // Instruction and_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 45: // Instruction bic_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 46: // Instruction bic_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 47: // Instruction bic_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 48: // Instruction bic_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 49: // Instruction bic_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 50: // Instruction bis_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 51: // Instruction bis_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 52: // Instruction bis_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 53: // Instruction bis_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 54: // Instruction bis_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 55: // Instruction bit_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 56: // Instruction bit_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 57: // Instruction bit_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 58: // Instruction bit_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 59: // Instruction bit_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 60: // Instruction cmp_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 61: // Instruction cmp_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 62: // Instruction cmp_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 63: // Instruction cmp_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 64: // Instruction cmp_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 65: // Instruction dadd_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 66: // Instruction dadd_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 67: // Instruction dadd_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 68: // Instruction dadd_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 69: // Instruction dadd_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 70: // Instruction sub_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 71: // Instruction sub_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 72: // Instruction sub_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 73: // Instruction sub_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 74: // Instruction sub_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 75: // Instruction subc_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 76: // Instruction subc_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 77: // Instruction subc_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 78: // Instruction subc_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 79: // Instruction subc_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 80: // Instruction xor_32idst
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_32idst(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 81: // Instruction xor_32isrc
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_32isrc(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 82: // Instruction xor_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_32imm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 83: // Instruction xor_32iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_32iaim(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 84: // Instruction xor_32irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double_32(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_32irm(instr_vec->get(2), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 85: // Instruction mov_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 86: // Instruction mov_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 87: // Instruction mov_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_mov_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 88: // Instruction add_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 89: // Instruction add_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 90: // Instruction add_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_add_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 91: // Instruction addc_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 92: // Instruction addc_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 93: // Instruction addc_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_addc_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 94: // Instruction and_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 95: // Instruction and_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 96: // Instruction and_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_and_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 97: // Instruction bic_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 98: // Instruction bic_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 99: // Instruction bic_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bic_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 100: // Instruction bis_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 101: // Instruction bis_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 102: // Instruction bis_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bis_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 103: // Instruction bit_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 104: // Instruction bit_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 105: // Instruction bit_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_bit_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 106: // Instruction cmp_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 107: // Instruction cmp_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 108: // Instruction cmp_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_cmp_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 109: // Instruction dadd_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 110: // Instruction dadd_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 111: // Instruction dadd_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_dadd_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 112: // Instruction sub_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 113: // Instruction sub_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 114: // Instruction sub_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sub_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 115: // Instruction subc_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 116: // Instruction subc_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 117: // Instruction subc_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_subc_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 118: // Instruction xor_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_16rm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 119: // Instruction xor_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_16irm(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 120: // Instruction xor_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Double(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_xor_16iaim(instr_vec->get(3), instr_vec->get(4), instr_vec->get(5), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 121: // Instruction rrc_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 122: // Instruction rrc_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 123: // Instruction rrc_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 124: // Instruction rrc_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 125: // Instruction rra_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 126: // Instruction rra_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 127: // Instruction rra_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 128: // Instruction rra_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 129: // Instruction swpb_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 130: // Instruction swpb_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 131: // Instruction swpb_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 132: // Instruction swpb_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 133: // Instruction sxt_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 134: // Instruction sxt_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 135: // Instruction sxt_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 136: // Instruction sxt_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 137: // Instruction push_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 138: // Instruction push_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 139: // Instruction push_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 140: // Instruction push_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 141: // Instruction call_32sm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_32sm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 142: // Instruction call_32am
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_32am(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 143: // Instruction call_32imm
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_32imm(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 144: // Instruction call_32im
        if (!ac_annul_sig) ISA._behavior_msp430_Single_32(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_32im(instr_vec->get(2), instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 145: // Instruction rrc_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 146: // Instruction rrc_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 147: // Instruction rrc_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rrc_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 148: // Instruction rra_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 149: // Instruction rra_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 150: // Instruction rra_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_rra_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 151: // Instruction swpb_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 152: // Instruction swpb_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 153: // Instruction swpb_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_swpb_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 154: // Instruction sxt_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 155: // Instruction sxt_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 156: // Instruction sxt_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_sxt_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 157: // Instruction push_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 158: // Instruction push_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 159: // Instruction push_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_push_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 160: // Instruction call_16rm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_16rm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 161: // Instruction call_16irm
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_16irm(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 162: // Instruction call_16iaim
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_call_16iaim(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 163: // Instruction reti
        if (!ac_annul_sig) ISA._behavior_msp430_Single(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        if (!ac_annul_sig) ISA.behavior_reti(instr_vec->get(9), instr_vec->get(10), instr_vec->get(6), instr_vec->get(7), instr_vec->get(8));
        break;
      case 164: // Instruction jne
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jne(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 165: // Instruction jeq
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jeq(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 166: // Instruction jnc
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jnc(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 167: // Instruction jc
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jc(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 168: // Instruction jn
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jn(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 169: // Instruction jge
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jge(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 170: // Instruction jl
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jl(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      case 171: // Instruction jmp
        if (!ac_annul_sig) ISA._behavior_msp430_Jump(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        if (!ac_annul_sig) ISA.behavior_jmp(instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
        break;
      } // switch (ins_id)
      break;
    }
    if ((!ac_wait_sig) && (!ac_annul_sig)) ac_instr_counter+=1;
    ac_annul_sig = 0;
  }
//!Updating Regs for behavioral simulation.
  if(!ac_wait_sig){
    bhv_pc = ac_pc;
  }
  if (ac_stop_flag) {
    return;
  }
  else {
    if (instr_in_batch < instr_batch_size) {
      instr_in_batch++;
    }
    else {
      instr_in_batch = 0;
      wait(1, SC_NS);
    }
  }

} // for (;;)
} // behavior()

 
#include <ac_sighandlers.H>

void msp430::init() {
  set_args(ac_argc, ac_argv);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();

  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
#ifndef AC_COMPSIM
  set_running();
#else
  void Execute(int argc, char *argv[]);
  Execute(argc, argv);
#endif
}

void msp430::init(int ac, char *av[]) {
  extern char* appfilename;
  ac_init_opt( ac, av);
  ac_init_app( ac, av);
  APP_MEM->load(appfilename);
  set_args(ac_argc, ac_argv);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();

  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
#ifndef AC_COMPSIM
  set_running();
#else
  void Execute(int argc, char *argv[]);
  Execute(argc, argv);
#endif
}

//Stop simulation (may receive exit status)
void msp430::stop(int status) {
  cerr << "ArchC: -------------------- Simulation Finished --------------------" << endl;
  ISA._behavior_end();
  ac_stop_flag = 1;
  ac_exit_status = status;
#ifndef AC_COMPSIM
  set_stopped();
#endif
}

void msp430::load(char* program) {
  APP_MEM->load(program);
}

void msp430::delayed_load(char* program) {
  has_delayed_load = true;
  delayed_load_program = new char[strlen(program)];
  strcpy(delayed_load_program, program);
}

// Returns pointer to gdbstub
AC_GDB<msp430_parms::ac_word>* msp430::get_gdbstub() {
  return gdbstub;
}

// Returns true if model endianness doesn't match with host's, false otherwise
bool msp430::get_ac_tgt_endian() {
  return ac_tgt_endian;
}

// Stops the processor
void msp430::ac_stop() {
  stop();
}

// Returns ac_pc value
unsigned msp430::get_ac_pc() {
  return ac_pc;
}

// Assigns value to ac_pc
void msp430::set_ac_pc(unsigned int value) {
  ac_pc = value;
}

// Wrapper function to PrintStat().
void msp430::PrintStat() {
  ac_arch<msp430_parms::ac_word, msp430_parms::ac_Hword>::PrintStat();
}

// Enables GDB
void msp430::enable_gdb(int port) {
  gdbstub->set_port(port);
  gdbstub->enable();
  gdbstub->connect();
}

